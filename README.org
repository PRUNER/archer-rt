#+DESCRIPTION: Sword, a data race detection tool for large OpenMP applications.
#+LANGUAGE: en
#+OPTIONS:  H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:  skip:nil d:nil todo:t pri:nil tags:not-in-toc

#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* License
Please see LICENSE for usage terms.

* Introduction
#+HTML: <img src="resources/images/sword_logo.png" hspace="5" vspace="5" height="45%" width="45%" alt="Sword Logo" title="Sword" align="right" />

*Sword* is a data race detector for OpenMP programs.
# <span style="font-weight: bold; font-variant: small-caps">sword</span>

Sword combines several techniques to identify data races in large
OpenMP applications, maintaining low runtime and zero overheads,
offering soundness and completeness of the data race detection
process. It builds on open-source tools infrastructure such as LLVM,
and OMPT to provide portability.

* Prerequisites
To compile Sword you need a host Clang/LLVM version >= 6.0, a CMake
version >= 3.4.3, [GLPK](https://www.gnu.org/software/glpk/) version >= 4.61, 
and [Boost](https://www.boost.org/) Libraries version >= 1.58.

Ninja build system is preferred. For more information how to obtain
Ninja visit https://github.com/ninja-build/ninja. (Note that this is
different than PRUNERS NINJA tool.)

Sword has been tested with the LLVM OpenMP Runtime version >= 6.0
(with OMPT support.

* Installation
Sword has been developed under LLVM 6.0 (for more information visit
http://llvm.org).

# ** Automatic Building
# For an automatic building script (recommended) please visit the GitHub
# page https://github.com/PRUNERS/llvm_sword.

** Manual Building
Sword comes as an LLVM tool, it can be compiled both as a stand-alone
tool or within the Clang/LLVM infrastructure.

In order to obtain and build Sword, follow the instructions below for
stand-alone or full Clang/LLVM with Sword support (instructions are
based on bash shell, Clang/LLVM 6.0 version, Ninja build system, and
the LLVM OpenMP Runtime with OMPT support).

*** Stand-alone building

 Create a folder in which to download and build Sword:

 #+BEGIN_SRC bash :exports code
   export SWORD_BUILD=$PWD/SwordBuild
   mkdir $SWORD_BUILD && cd $SWORD_BUILD
 #+END_SRC

 Obtain the LLVM OpenMP Runtime with OMPT support:

 #+BEGIN_SRC bash :exports code
   git clone https://github.com/llvm-mirror/openmp.git openmp
 #+END_SRC

 and build it with the following command:

 #+BEGIN_SRC bash :exports code
   export OPENMP_INSTALL=$HOME/usr           # or any other install path
   cd openmp/runtime
   mkdir build && cd build
   cmake -G Ninja \
    -D CMAKE_C_COMPILER=clang \
    -D CMAKE_CXX_COMPILER=clang++ \
    -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_INSTALL_PREFIX:PATH=$OPENMP_INSTALL \
    ..
   ninja -j8 -l8                             # or any number of available cores
   ninja install
 #+END_SRC

 Obtain Sword:

 #+BEGIN_SRC bash :exports code
   cd $SWORD_BUILD
   git clone https://github.com/PRUNERS/sword.git sword
 #+END_SRC

 and build it with the following commands:

 #+BEGIN_SRC bash :exports code
   export SWORD_INSTALL=$HOME/usr           # or any other install path
   cd sword
   mkdir build && cd build
   cmake -G Ninja \
    -D CMAKE_C_COMPILER=clang \
    -D CMAKE_CXX_COMPILER=clang++ \
    -D CMAKE_BUILD_TYPE=Release
    -D OMP_PREFIX:PATH=$OPENMP_INSTALL \
    -D CMAKE_INSTALL_PREFIX:PATH=${SWORD_INSTALL} \
    # -D GLPK_ROOT= \
    # -D BOOST_ROOT= \
    -D COMPRESSION=LZO .. \
    ninja -j8 -l8 # or any number of available cores 
    ninja install
    cd ../..
 #+END_SRC

# ** Build Sword within Clang/LLVM

# Create a folder in which to download and build Clang/LLVM and Sword:

# #+BEGIN_SRC bash :exports code
#   export SWORD_BUILD=$PWD/SwordBuild
#   mkdir $SWORD_BUILD && cd $SWORD_BUILD
# #+END_SRC

# Obtain LLVM:

# #+BEGIN_SRC bash :exports code
#   git clone https://github.com/llvm-mirror/llvm.git llvm_src
#   cd llvm_src
#   git checkout release_39
# #+END_SRC

# Obtain Clang:

# #+BEGIN_SRC bash :exports code
#   cd tools
#   git clone https://github.com/llvm-mirror/clang.git clang
#   cd clang
#   git checkout release_39
#   cd ..
# #+END_SRC

# Obtain Sword:

# #+BEGIN_SRC bash :exports code
#   cd tools
#   git clone https://github.com/PRUNERS/sword.git sword
#   cd ..
# #+END_SRC

# Obtain the LLVM compiler-rt:

# #+BEGIN_SRC bash :exports code
#   cd projects
#   git clone https://github.com/llvm-mirror/compiler-rt.git compiler-rt
#   cd compiler-rt
#   git checkout release_39
#   cd ../..
# #+END_SRC

# Obtain LLVM libc++:

# #+BEGIN_SRC bash :exports cod
#   cd projects
#   git clone https://github.com/llvm-mirror/libcxx.git
#   cd libcxx
#   git checkout release_39
#   cd ../..
# #+END_SRC

# Obtain LLVM libc++abi:

# #+BEGIN_SRC bash :exports code
#   cd projects
#   git clone https://github.com/llvm-mirror/libcxxabi.git
#   cd libcxxabi
#   git checkout release_39
#   cd ../..
# #+END_SRC

# Obtain LLVM libunwind:

# #+BEGIN_SRC bash :exports code
#   cd projects
#   git clone https://github.com/llvm-mirror/libunwind.git
#   cd libunwind
#   git checkout release_39
#   cd ../..
# #+END_SRC

# Obtain official LLVM OpenMP Runtime:

# #+BEGIN_SRC bash :exports code
#   cd projects
#   git clone https://github.com/llvm-mirror/openmp.git openmp
# #+END_SRC

# # or obtain LLVM OpenMP Runtime with OMPT support:

# # #+BEGIN_SRC bash :exports code
# #   cd projects
# #   git clone https://github.com/OpenMPToolsInterface/LLVM-openmp.git openmp
# #   cd openmp
# #   git checkout tr4-stable
# #   cd ../..
# # #+END_SRC

# Now that we obtained the source code, the following command
# will build LLVM/Clang infrastructure with Sword support.

# First we boostrap clang:

# #+BEGIN_SRC bash :exports code
#   cd $SWORD_BUILD
#   mkdir -p llvm_bootstrap
#   cd llvm_bootstrap
#   CC=$(which gcc) CXX=$(which g++) cmake -G Ninja \
#    -DCMAKE_BUILD_TYPE=Release \
#    -DLLVM_TOOL_SWORD_BUILD=OFF \
#    -DLLVM_TARGETS_TO_BUILD=Native \
#    ../llvm_src
#   ninja -j8 -l8                           # or any number of available cores
#   cd ..
#   export LD_LIBRARY_PATH="$SWORD_BUILD/llvm_bootstrap/lib:${LD_LIBRARY_PATH}"
#   export PATH="$SWORD_BUILD/llvm_bootstrap/bin:${PATH}"
# #+END_SRC

# Then, we can actually build LLVM/Clang with Sword support.

# In case of official LLVM OpenMP Runtime run:

# #+BEGIN_SRC bash :exports code
#   export LLVM_INSTALL=$HOME/usr           # or any other install path
#   mkdir llvm_build && cd llvm_build
#   cmake -G Ninja \
#    -D CMAKE_C_COMPILER=clang \
#    -D CMAKE_CXX_COMPILER=clang++ \
#    -D CMAKE_BUILD_TYPE=Release \
#    -D OMP_PREFIX:PATH=$LLVM_INSTALL \
#    -D CMAKE_INSTALL_PREFIX:PATH=$LLVM_INSTALL \
#    -D CLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \
#    -D LLVM_ENABLE_LIBCXX=ON \
#    -D LLVM_ENABLE_LIBCXXABI=ON \
#    -D LIBCXXABI_USE_LLVM_UNWINDER=ON \
#    -D CLANG_DEFAULT_CXX_STDLIB=libc++ \
#    -D LIBOMP_TSAN_SUPPORT=TRUE \
#    ../llvm_src
#   ninja -j8 -l8                           # or any number of available cores
#   ninja check-libsword
#   ninja install
# #+END_SRC

# Otherwise, in case of LLVM OpenMP Runtime with OMPT support run:

# #+BEGIN_SRC bash :exports code
#   export LLVM_INSTALL=$HOME/usr           # or any other install path
#   mkdir llvm_build && cd llvm_build
#   cmake -G Ninja \
#    -D CMAKE_C_COMPILER=clang \
#    -D CMAKE_CXX_COMPILER=clang++ \
#    -D CMAKE_BUILD_TYPE=Release \
#    -D OMP_PREFIX:PATH=$LLVM_INSTALL \
#    -D CMAKE_INSTALL_PREFIX:PATH=$LLVM_INSTALL \
#    -D CLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \
#    -D LLVM_ENABLE_LIBCXX=ON \
#    -D LLVM_ENABLE_LIBCXXABI=ON \
#    -D LIBCXXABI_USE_LLVM_UNWINDER=ON \
#    -D CLANG_DEFAULT_CXX_STDLIB=libc++ \
#    -D LIBOMP_OMPT_SUPPORT=on \
#    -D LIBOMP_OMPT_BLAME=on \
#    -D LIBOMP_OMPT_TRACE=on \
#    ../llvm_src
#   ninja -j8 -l8                           # or any number of available cores
#   ninja check-libsword
#   ninja install
# #+END_SRC

# Once the installation completes, you need to setup your environment
# to allow Sword to work correctly.

# Please set the following path variables:

# #+BEGIN_SRC bash :exports code
# export PATH=${LLVM_INSTALL}/bin:${PATH}"
# export LD_LIBRARY_PATH=${LLVM_INSTALL}/lib:${LD_LIBRARY_PATH}"
# #+END_SRC

# To make the environment permanent, add the previous lines or
# equivalents to your shell start-up script such as "~/.bashrc".

* Usage

** How to compile

Sword provides a command to compile your programs with Clang/LLVM
OpenMP and hide all the mechanisms necessary to detect data races.

The Sword compile command is called /clang-sword/, and this can be
used as a drop-in replacement of your compiler command (e.g., clang,
gcc, etc.).

The following are some of the examples of how one can integrate
/clang-sword/ into her build system.

*** Single source

#+BEGIN_SRC bash :exports code
clang-sword example.c -o example
#+END_SRC

*** Makefile

In your Makefile, set the following variables:

#+BEGIN_SRC bash :exports code
CC=clang-sword
#+END_SRC

# *** Hybrid MPI-OpenMP programs

# In your Makefile, set the following variables:

# #+BEGIN_SRC bash :exports code
# CC = mpicc -cc=clang-sword
# #+END_SRC

** Options

The command /clang-sword/ works as a compiler wrapper, all the
options available for clang are also available for /clang-sword/.

** Runtime Flags

Runtime flags are passed via *SWORD&#95;OPTIONS* environment variable,
different flags are separated by spaces, e.g.:

#+BEGIN_SRC bash :exports code
SWORD_OPTIONS="traces_path=/path/to/traces/data" ./myprogram
#+END_SRC

|-----------------+---------------+-----------------------------------------------------------------------|
| Flag Name       | Default value | Description                                                           |
|-----------------+---------------+-----------------------------------------------------------------------|
| traces&#95;path | not set       | Specify the path where to save the data gathered by Sword at runtime. |
|-----------------+---------------+-----------------------------------------------------------------------|

* Example

Let us take the program below and follow the steps to compile and
check the program for data races.

Suppose our program is called /myprogram.c/:

#+BEGIN_SRC emacs-lisp -n 1 :exports code
#include <stdio.h>

#define N 1000

int main (int argc, char **argv)
{
  int a[N];

#pragma omp parallel for
  for (int i = 0; i < N - 1; i++) {
    a[i] = a[i + 1];
  }
}
#+END_SRC

We compile the program as follow:

#+BEGIN_SRC bash :exports code
clang-sword myprogram.c -o myprogram
#+END_SRC

Now we can run the program with the following commands:

#+BEGIN_SRC bash :exports code
export OMP_NUM_THREADS=2
./myprogram
#+END_SRC

Sword will run the dynamic analysis and gather the data in the default
folder /sword_data/ in the current path. At the end of the execution
Sword will print out the commands we have to execute to run the offline
analysis, for this example it will print the following information:

#+BEGIN_SRC bash :exports code

################################################################

SWORD data gathering terminated.

To analyze the data and detect races, please execute:

sword-offline-analysis --analysis-tool /path/to/sword-race-analysis --executable /path/to/your/executable --traces-path /path/to/sword_data --report-path /path/to/sword_report


To print the results of theanalysis, please execute:

sword-print-report --executable /path/to/your/executable --report-path /path/to/sword_report

################################################################

#+END_SRC

Now we can execute the offline analysis with the tool:

#+BEGIN_SRC bash :exports code
sword-offline-analysis --analysis-tool sword-race-analysis --executable myprogram --traces-path sword_data --report-path sword_report
#+END_SRC

Then, print the result of the analysis with:

#+BEGIN_SRC bash :exports code
sword-print-report --executable myprogram --report-path sword_report
#+END_SRC

For our example, the result will be the following:

#+BEGIN_SRC bash :exports code
--------------------------------------------------
WARNING: SWORD: data race (program=myprogram)
  Two different threads made the following accesses:
    Write of size 4 in .omp_outlined._debug__ at /home/satzeni/work/compilers/sword/sword/build/myprogram.c:11:10
    Read of size 4 in .omp_outlined._debug__ at /home/satzeni/work/compilers/sword/sword/build/myprogram.c:11:12
--------------------------------------------------
#+END_SRC

* Contacts and Support

- [[https://pruners.slack.com][Slack Channel]]
  #+HTML: <ul style="list-style-type:circle"> <li> For an invitation please write an email to <a href="mailto:simone@cs.utah.edu?Subject=[sword-slack] Slack Invitation" target="_top">Simone Atzeni</a> with a reason why you want to be part of the PRUNERS Slack Team. </li> </ul>
- E-Mail Contacts:
  #+HTML: <ul style="list-style-type:circle"> <li> <a href="mailto:simone@cs.utah.edu?Subject=[sword-dev]%20" target="_top">Simone Atzeni</a> </li> </ul>

* Members

#+HTML: <img src="resources/images/uofu_logo.png" hspace="15" vspace="5" height="23%" width="23%" alt="UofU Logo" title="University of Utah" style="float:left"/> <img src="resources/images/llnl_logo.png" hspace="70" vspace="5" height="30%" width="30%" alt="LLNL Logo" title="Lawrence Livermore National Laboratory" style="float:center" />
