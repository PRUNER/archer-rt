#!/usr/bin/env python

import argparse
import errno
import json
import os
import re
import shutil
import signal
import subprocess
import sys
from distutils.spawn import find_executable
from os.path import expanduser

VERSION = '0.1'
TOOL_NAME = 'SWORD'

# Working Dirs
USER_HOME = expanduser("~")
WORKING_DIR = os.getcwd()
MOAB_DIR = WORKING_DIR + "/sword_moab"
SWORD_TRACE = 'sword_data'
SWORD_REPORT = 'sword_report'
args = ""
executable = ""
analysis_tool = ""

def createMOABConfig(config_file , shell, partition, output, cmd):
    f = open(config_file, 'w')
    s = """#!%s
            ##### These lines are for Moab
            #MSUB -l nodes=1
            #MSUB -l partition=%s
            #MSUB -l walltime=86400
            #MSUB -q pbatch
            #MSUB -o %s
            #MSUB -V
            ##### These are shell commands
            ##### Launch parallel job using srun
            %s""" % (shell, partition, output, cmd)
    f.write(s)
    f.close()

def sanitizeFileName(filename):
    return filename.rsplit("/", 1)[-1]

def signal_handler(signal, frame):
    print('You pressed Ctrl+C!')
#     if not KEEP_LOGS:
#         try:
#             cleanLogs()
#         except OSError, e:
#             pass
#     else:
#         with open(LOGS_FLAG, "w") as f:
#             f.write('1')
#             f.close()
    sys.exit(0)
    
def executeCommand(command, wait = True):
    if(wait):
            process = subprocess.Popen(command, shell=True, stdin=None, stdout=None, stderr=None)
            process.wait()
    else:
            process = subprocess.Popen(command, shell=True, stdin=None, stdout=None, stderr=None, close_fds=True)
    return process.returncode

class dotdict(dict):
    def __getattr__(self, attr):
        return self.get(attr)
    __setattr__= dict.__setitem__
    __delattr__= dict.__delitem__

def logPath(path):
    file = open(LOGS_LIST, "a")
    file.write(path + "\n")
    file.close()

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as e:
        if e.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

def argumentsParser():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Analyze the traces generated by ' + TOOL_NAME + ' analysis.')
    parser.add_argument('-v', '--version', action='version', version=TOOL_NAME + ' ' + VERSION + '\nCopyright (C) 2017', help="Print version number and exit.")
    parser.add_argument('--executable', nargs=1, required=True, help='Specify the name of the executable to analyze.')
    parser.add_argument('--report-path', nargs=1, default=["./" + SWORD_REPORT], help='Specify the path to the ' + TOOL_NAME + ' report folder.')
    parser.add_argument('--traces-path', nargs=1, default=["./" + SWORD_TRACE], help='Specify the path to the ' + TOOL_NAME + ' traces folder.')
    parser.add_argument('--analysis-tool', nargs=1, default="sword-race-analysis", help='Specify the path to ' + TOOL_NAME + ' custom analysis tool.')
    parser.add_argument('--cluster-run', action='store_true', help='Run offline analysis across a cluster using MOAB and SLURM.')
    
    return parser

if __name__ == '__main__':

    signal.signal(signal.SIGINT, signal_handler)

    parser = argumentsParser();
    args, unknown = parser.parse_known_args()

    # Unknown arguments
    if(unknown):
        print "Ignoring the following unknown args:", unknown
        
    # Set default analysis tool
    analysis_tool = find_executable(args.analysis_tool)
    
    # Report folder       
    args.report_path = args.report_path[0]
#     if os.path.exists(args.report_path + "/" + SWORD_REPORT):
#         print "Found existing report folder, please delete or rename it before proceeding with analysis."
#         sys.exit(-1)
#     args.report_path = "%s/%s" % (args.report_path, SWORD_REPORT)
#     args.report_path.replace("//", "/")
    mkdir_p(args.report_path)

    # Traces folder
    args.traces_path = args.traces_path[0]
    if not os.path.exists(args.traces_path):
        print "The traces folder '" + args.traces_path + "' does not exists.\nPlease specify the correct path with the option '--traces-path <path-to-traces-folder>'."
        sys.exit(-1)

    # Executable check
    executable = args.executable[0]
    if not os.path.exists(executable):
        print "The executable '" + executable + "' does not exists.\nPlease specify the correct path and name for the executable."
        sys.exit(-1)
    
    if(args.cluster_run):    
        # Create MOAB dir
        mkdir_p(MOAB_DIR)
        # Common MOAB Configuration values
        shell = find_executable("bash")
        partition = os.environ['LCSCHEDCLUSTER']
        
    for subdir, dirs, files in os.walk(args.traces_path, False):
        if subdir == args.traces_path:
            continue
        if(args.cluster_run):
            # Use MOAB
            # MOAB Configuration values
            config_file = MOAB_DIR + "/moab_config_" + sanitizeFileName(subdir)
            output = MOAB_DIR + "/moab_output_" + sanitizeFileName(subdir)
            cmd = "%s --executable %s --traces-path %s --report-path %s" % (analysis_tool, executable, subdir, args.report_path) 
            createMOABConfig(config_file , shell, partition, output, cmd)
            # Run on cluster
            command = "msub " +  config_file
            ret = executeCommand(command, False)
            if(ret):
                print "A problem occurred while analyzing the traces in folder '" + subdir + "'.\n\nPlease run the analysis again with the command: '" + command + "'."
        else:
            command = "%s --executable %s --traces-path %s --report-path %s" % (analysis_tool, executable, subdir, args.report_path)
            ret = executeCommand(command)
            if(ret):
                print "A problem occurred while analyzing the traces in folder '" + subdir + "'.\n\nPlease run the analysis again with the command: '" + command + "'." 
