#!/usr/bin/env python

import argparse
import errno
import json
import os
import re
import shutil
import signal
import subprocess
import sys
import time
from distutils.spawn import find_executable
from os.path import expanduser

VERSION = '0.1'
TOOL_NAME = 'SWORD'

# Working Dirs
USER_HOME = expanduser("~")
WORKING_DIR = os.getcwd()
SLURM_DIR = WORKING_DIR + "/sword_slurm"
SWORD_TRACE = 'sword_data'
SWORD_REPORT = 'sword_report'
args = ""
executable = ""
analysis_tool = ""
shell = find_executable("bash")
walltime = "24:00:00"
partition = "pbatch"

def createSLURMConfig(config_file, walltime, output, cmd):
    f = open(config_file, 'w')
    s = "#!%s\n#SBATCH --nodes=1\n#SBATCH --time=%s\n#SBATCH --partition=%s\n#SBATCH --output %s\n%s\n\n" % (shell, walltime, partition, output, cmd)
    f.write(s)
    f.close()

def sanitizeFileName(filename):
    return filename.rsplit("/", 1)[-1]

def signal_handler(signal, frame):
    print('You pressed Ctrl+C!')
#     if not KEEP_LOGS:
#         try:
#             cleanLogs()
#         except OSError, e:
#             pass
#     else:
#         with open(LOGS_FLAG, "w") as f:
#             f.write('1')
#             f.close()
    sys.exit(0)

def executeCommand(command, wait = True):
    if(wait):
            process = subprocess.Popen(command, shell=True, stdin=None, stdout=None, stderr=None)
            process.wait()
    else:
            process = subprocess.Popen(command, shell=True, stdin=None, stdout=None, stderr=None, close_fds=True)
    return process.returncode

class dotdict(dict):
    def __getattr__(self, attr):
        return self.get(attr)
    __setattr__= dict.__setitem__
    __delattr__= dict.__delitem__

def logPath(path):
    file = open(LOGS_LIST, "a")
    file.write(path + "\n")
    file.close()

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as e:
        if e.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

def argumentsParser():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Analyze the traces generated by ' + TOOL_NAME + ' analysis.')
    parser.add_argument('-v', '--version', action='version', version=TOOL_NAME + ' ' + VERSION + '\nCopyright (C) 2017', help="Print version number and exit.")
    parser.add_argument('--executable', nargs=1, required=True, help='Specify the name of the executable to analyze.')
    parser.add_argument('--report-path', nargs=1, default=["./" + SWORD_REPORT], help='Specify the path to the ' + TOOL_NAME + ' report folder.')
    parser.add_argument('--traces-path', nargs=1, default=["./" + SWORD_TRACE], help='Specify the path to the ' + TOOL_NAME + ' traces folder.')
    parser.add_argument('--analysis-tool', nargs=1, default=[ "sword-race-analysis" ], help='Specify the path to ' + TOOL_NAME + ' custom analysis tool.')
    parser.add_argument('--cluster-run', action='store_true', help='Run offline analysis across a cluster using SLURM.')
    parser.add_argument('--dry-run', '-dr', action='store_true', help='Make a dry run without actually execute the experiments (for debug purposes).')
    parser.add_argument('--print_tree', '-p', action='store_true', help='Print the interval tree in "dot" format.')

    return parser

if __name__ == '__main__':

    signal.signal(signal.SIGINT, signal_handler)

    parser = argumentsParser();
    args, unknown = parser.parse_known_args()

    # Unknown arguments
    if(unknown):
        print "Ignoring the following unknown args:", unknown

    # Set default analysis tool
    analysis_tool = find_executable(args.analysis_tool[0])

    # Report folder
    args.report_path = args.report_path[0]
#     if os.path.exists(args.report_path + "/" + SWORD_REPORT):
#         print "Found existing report folder, please delete or rename it before proceeding with analysis."
#         sys.exit(-1)
#     args.report_path = "%s/%s" % (args.report_path, SWORD_REPORT)
#     args.report_path.replace("//", "/")

    # Traces folder
    args.traces_path = args.traces_path[0]
    if not os.path.exists(args.traces_path):
        print "The traces folder '" + args.traces_path + "' does not exists.\nPlease specify the correct path with the option '--traces-path <path-to-traces-folder>'."
        sys.exit(-1)

    # Executable check
    executable = args.executable[0]
    if not os.path.exists(executable):
        print "The executable '" + executable + "' does not exists.\nPlease specify the correct path and name for the executable."
        sys.exit(-1)

    mkdir_p(args.report_path)
    mkdir_p(args.report_path + "/overhead")

    if(args.cluster_run):
        # Create SLURM dir
        mkdir_p(SLURM_DIR)
        # Common SLURM Configuration values
        # shell = find_executable("bash")
        # partition = os.environ['LCSCHEDCLUSTER']

    # Create list of parallel regions and potential nested parallel regions
    # dict(pid) = { pid, bid, file_offset_begin, file_offset_end, [ nested_regions] }
    pregions = {}
    for subdir, dirs, files in os.walk(args.traces_path, False):
        for file in files:
            if "metafile" in file:
                lines = [line.rstrip('\n') for line in open(args.traces_path + "/" + file)]
                for line in lines:
                    (pid, ppid, bid, offset, span, level, file_offset_begin, file_offset_end) = [t(s) for t,s in zip((int,int,int,int,int,int,int,int),line.split(","))]
                    # print(pid, ppid, bid, file_offset_begin, file_offset_end)
                    # print line
                    if pid not in pregions:
                        pregions[pid] = {}
                        pregions[pid][bid] = { 'nested': [] }
                    else:
                        if bid not in pregions[pid]:
                            pregions[pid][bid] = { 'nested': [] }
                    # if ppid in pregions:
                    #     pregions[ppid][bid]['nested'].append(pid)

#     pregions = {}
#     for subdir, dirs, files in os.walk(args.traces_path, False):
#         for file in files:
#             if "metafile" in file:
#                 lines = [line.rstrip('\n') for line in open(args.traces_path + "/" + file)]
#                 tid = file.split(_)[1]
#                 for line in lines:
#                     (pid, ppid, bid, file_offset_begin, file_offset_end) = [t(s) for t,s in zip((int,int,int,int,int),line.split(","))]
#                     # print(pid, ppid, bid, file_offset_begin, file_offset_end)
#                     print line
#                     if pid not in pregions:
#                         pregions[tid][pid] = { 'bid': [ (bid, file_offset_begin, file_offset_end) ], 'nested': [] }
#                     else:
#                         pregions[tid][pid]['bid'].append((bid, file_offset_begin, file_offset_end));
#                     if ppid in pregions:
#                         pregions[tid][ppid]['nested'].append(pid)

    print_tree = ""
    if args.print_tree:
        command += " --print"

    for key,value in pregions.iteritems():
        for bid, nested in value.iteritems():
            if(args.cluster_run):
                # Use SLURM
                # SLURM Configuration values
                config_file = SLURM_DIR + "/slurm_config_" + sanitizeFileName(subdir) + "_" + str(key)
                output = SLURM_DIR + "/slurm_output_" + sanitizeFileName(subdir)
                cmd = "ulimit -c unlimited\nstantime \"%s --executable %s --traces-path %s --report-path %s --pregion %s %s\" %s/overhead/%s.dat" % (analysis_tool, executable, args.traces_path, args.report_path, key, print_tree, args.report_path, key)
                createSLURMConfig(config_file, walltime, output, cmd)
                # Run on cluster
                # sbatch_output_file = "%s/%s.%s.%s" % (benchmark_paths[val["path"]]["sbatch_output_path"], app["executable"], mode, t)
                # command = "sbatch --output=" + sbatch_output_file + " " + config_file
                command = "sbatch " + config_file
                ret = None
                bashCommand = "squeue | grep atzeni1 | wc -l"
                bash_process = subprocess.Popen(bashCommand, stdout=subprocess.PIPE, shell=True)
                bash_out, bash_err = bash_process.communicate()
                while(int(bash_out) >= 30):
                    bash_process = subprocess.Popen(bashCommand, stdout=subprocess.PIPE, shell=True)
                    bash_out, bash_err = bash_process.communicate()
                    print bash_out
                    time.sleep(5)
                if(not args.dry_run):
                    ret = executeCommand(command, False)
                if(ret):
                    print "A problem occurred while analyzing the traces in folder '" + subdir + "'.\n\nPlease run the analysis again with the command: '" + command + "'."
            else:
                overhead_filename = "%s/overhead/%s.dat" % (args.report_path, key)
                if(not os.path.exists(overhead_filename)):
                    nested_str = ','.join(map(str, nested['nested']))
                    if(not nested_str):
                        command = "ulimit -c unlimited\nstantime \"%s --executable %s --traces-path %s --report-path %s --pregion %s --bid %s %s\" %s/overhead/%s.dat" % (analysis_tool, executable, args.traces_path, args.report_path, key, bid, print_tree, args.report_path, key)
                    else:
                        command = "ulimit -c unlimited\nstantime \"%s --executable %s --traces-path %s --report-path %s --pregion %s --bid %s --nested %s %s\" %s/overhead/%s.dat" % (analysis_tool, executable, args.traces_path, args.report_path, key, bid, nested_str, print_tree, args.report_path, key)
                    print command
                    ret = None
                    if(not args.dry_run):
                        ret = executeCommand(command)
                    if(ret):
                        print "A problem occurred while analyzing the traces in folder '" + subdir + "'.\n\nPlease run the analysis again with the command: '" + command + "'."
                else:
                    print "%s exists!" % overhead_filename
