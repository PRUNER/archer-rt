#!/usr/bin/env python

import argparse
import errno
import json
import os
import re
import shutil
import signal
import subprocess
import sys
from os.path import expanduser

VERSION = '0.1'
TOOL_NAME = 'SWORD'

# Working Dirs
USER_HOME = expanduser("~")
WORKING_DIR = os.getcwd()
SWORD_TRACE = 'sword_data'
SWORD_REPORT = 'sword_report'
args = ""
executable = ""

def sanitizeFileName(filename):
    return filename.rsplit("/", 1)[-1]

def signal_handler(signal, frame):
    print('You pressed Ctrl+C!')
#     if not KEEP_LOGS:
#         try:
#             cleanLogs()
#         except OSError, e:
#             pass
#     else:
#         with open(LOGS_FLAG, "w") as f:
#             f.write('1')
#             f.close()
    sys.exit(0)

class dotdict(dict):
    def __getattr__(self, attr):
        return self.get(attr)
    __setattr__= dict.__setitem__
    __delattr__= dict.__delitem__

def logPath(path):
    file = open(LOGS_LIST, "a")
    file.write(path + "\n")
    file.close()

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as e:
        if e.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

def argumentsParser():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Analyze the traces generated by ' + TOOL_NAME + ' analysis.')
    parser.add_argument('-v', '--version', action='version', version=TOOL_NAME + ' ' + VERSION + '\nCopyright (C) 2017', help="Print version number and exit.")
    parser.add_argument('--executable', nargs=1, required=True, help='Specify the name of the executable to analyze.')
    parser.add_argument('--report-path', nargs=1, default="./", help='Specify the path to the ' + TOOL_NAME + ' report folder.')
    parser.add_argument('--traces-path', nargs=1, default="./" + SWORD_TRACE, help='Specify the path to the ' + TOOL_NAME + ' traces folder.')
      
    return parser

if __name__ == '__main__':

    signal.signal(signal.SIGINT, signal_handler)

    mkdir_p(USER_HOME +'/' + SWORD_REPORT)

    parser = argumentsParser();
    args, unknown = parser.parse_known_args()

    # Unknown arguments
    if(unknown):
        print "Ignoring the following unknown args:", unknown 
    
    # Report folder           
    if os.path.exists(args.report_path + "/" + SWORD_REPORT):
        print "Found existing report folder, please delete or rename it before proceeding with analysis."
        sys.exit(-1)
    args.report_path = "%s%s" % (args.report_path, SWORD_REPORT)
    args.report_path.replace("//", "/")
    
    mkdir_p(args.report_path)

    # Traces folder
    if not os.path.exists(args.traces_path):
        print "The traces folder '" + args.traces_path + "' does not exists.\nPlease specify the correct path with the option '--traces-path <path-to-traces-folder>'."
        sys.exit(-1)

    # Executable check
    executable = args.executable[0]
    if not os.path.exists(executable):
        print "The executable '" + args.executable + "' does not exists.\nPlease specify the correct path and name for the executable."
        sys.exit(-1)
        
    for subdir, dirs, files in os.walk(args.traces_path, False):
        if subdir == args.traces_path:
            continue
        print subdir
